#!/bin/bash

set -xe
dir=$(cd ${0%/*}; pwd)

url=https://github.com/esp8266/Arduino.git
branch=master

rm -f package_esp8266com_index.json.new message.txt

test `find ${dir}/PR.open.json -mmin +60` && rm -f ${dir}/PR.open.json
if [ ! -r ${dir}/PR.open.json ]; then
    curl "https://api.github.com/repos/esp8266/Arduino/pulls?state=open&per_page=100" > ${dir}/PR.open.json
fi
python3 -c "
import json

with open('${dir}/PR.open.json', 'r') as f:
    array = json.load(f)

for pr in array:
    for label in pr['labels']:
        print('%s \"%s\" \"%s\"' % (pr['number'], label['name'], pr['title']))
" > ${dir}/PR.labels.txt

cp index.html.template index.html.temp

for v in 0.0.?; do
(
    cd gh || { git clone -b ${branch} ${url} gh; cd gh; }

    # fetch everything
    git fetch ${url}
    git fetch --tags ${url}

    # reset branch
    git checkout origin/${branch}
    git branch -D ${branch}
    git checkout -b ${branch}
    git pull origin ${branch}
    git reset --hard

    # reset submodules
    git clean -xfd
    git submodule foreach git clean -xfd
    git reset --hard
    git submodule foreach git reset --hard
    git submodule update --init

    # apply PRs if any
    prok=""
    rm -f ${dir}/prdetails.html
    labels="$(cat ${dir}/${v})"
    for label in ${labels}; do
        grep \"${label}\" ${dir}/PR.labels.txt | sed \
            -e 's,$,</a><br>,g' \
            -e 's,^\([0-9]*\),<a href="https://github.com/esp8266/Arduino/pull/\1">#\1,g' \
            >> ${dir}/prdetails.html
        prs="$(grep \"${label}\" ${dir}/PR.labels.txt | cut -d\  -f 1)"
        for pr in ${prs}; do
            git reset --hard
            git clean -xfd
            git submodule foreach git clean -xfd
            git checkout master
            git branch -D PR-${pr} || true
            git fetch origin pull/${pr}/head:PR-${pr} || true
            git reset --hard
            git clean -xfd
            git submodule foreach git clean -xfd
            git checkout -f PR-${pr}
            git submodule update
            git reset --hard
            git clean -xfd
            git submodule foreach git clean -xfd
            git checkout ${branch}
            git merge --no-edit PR-${pr} || { git merge --abort; continue; }
            prok="${prok} ${pr}"
        done
    done

    echo "PR list to add: ${prok}"

    # skip when not 0.0.1 and empty PR list
    if [ -z "$prok" -a ${v} != 0.0.1 ]; then

        echo "nothing to add in ${v}, skipping"

    else

        export REMOTE_URL=http://d-a-v.github.io/esp8266/Arduino/releases/download
        git tag -d ${v} || true
        ver=$(git describe --tag)
        git tag ${v}
        cd package
        rm -rf versions
        export MOREJSONPACKAGES=$dir/package_esp8266com_index.json.new
        export GITHUB_EVENT_PATH=$(pwd)/../../.github_event_path
        echo "{\"ref\":\"${v}\"}" > ${GITHUB_EVENT_PATH}
        ./build_boards_manager_package.sh
        cd ..

        cp package/versions/${v}/esp8266-${v}.zip $dir/
        cp package/versions/${v}/package_esp8266com_index.json $dir/package_esp8266com_index.json.new

        lasttag=$(git describe --tag|cut -d- -f1)
        git log --oneline ${lasttag}.. > $dir/newlog.txt

        cd $dir/../..

        git filter-branch --tree-filter "rm -rf esp8266/Arduino/releases/download/versions/${v}/esp8266-${v}.zip" --prune-empty HEAD

        set +e
        git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d
        git commit -m 'Removing previous v${v} from git history'
        set -e

        git gc

        cd $dir

        mkdir -p releases/download/versions/${v}/
        mv esp8266-${v}.zip releases/download/versions/${v}/
        # copy no delete json.new package file, it is used at next loop by MOREJSONPACKAGES
        cp package_esp8266com_index.json.new package_esp8266com_index.json

        PR=""
        SPR=""
        for pr in ${prok}; do
            PR+=" <a href=\"https://github.com/esp8266/Arduino/pull/$pr\">#${pr}</a>"
            SPR+="-#${pr}"
        done
        echo "${v}:-git-version--${ver},-list-of-included-PRs-:${SPR:-"-none"}" >> $dir/message.txt

        echo "<br><li>version ${v}: git:'${ver}' ($(date -u)) (${PR} )<br>" >> index.html.temp
        echo "<a href=\"log-${v}.txt\">List of all commits</a> since latest official release<br>" >> index.html.temp
        [ -f prdetails.html ] && (echo "Additional PRs:<br>"; cat ${dir}/prdetails.html; ) >> index.html.temp
        cp index.html.temp index.html

        mv newlog.txt log-${v}.txt
        git add package_esp8266com_index.json releases/download/versions/${v}/esp8266-${v}.zip index.html log-${v}.txt

        ./rss.make ${v}
        git add rss.items.xml ../../rss.xml

        git commit -m "snapshot '$ver' $(date -u)"
    fi
)
done

date -u >> $dir/message.txt

# replace boards names by free text visible in arduino IDE board manager
# https://unix.stackexchange.com/a/476548
jq "
  # Apply f to composite entities recursively, and to atoms
  def walk(f):
    . as \$in
    | if type == \"object\" then
       reduce keys[] as \$key
         ( {}; . + { (\$key):  (\$in[\$key] | walk(f)) } ) | f
    elif type == \"array\" then map( walk(f) ) | f
    else f
    end;
  walk(.boards?=[{\"name\":\"$(cat $dir/message.txt)\"}])
" package_esp8266com_index.json.new > package_esp8266com_index.json

git add package_esp8266com_index.json
git commit -m "comments"

echo "now execute: 'git push --force'"
